diff --git a/sympy/core/mul.py b/c:/python25/lib/site-packages/sympy/core/mul.py
index 795b293..817edb8 100644
--- a/sympy/core/mul.py
+++ b/c:/python25/lib/site-packages/sympy/core/mul.py
@@ -2,6 +2,7 @@
 from basic import Basic, S, sympify
 from operations import AssocOp
 from cache import cacheit
+import sympy.core.numbers
 
 from logic import fuzzy_not
 
@@ -58,7 +59,6 @@ def flatten(cls, seq):
         # o exp_dict
         #
         # NOTE: this is optimized for all-objects-are-commutative case
-
         for o in seq:
             # O(x)
             if o.is_Order:
@@ -88,7 +88,6 @@ def flatten(cls, seq):
                 coeff *= o
                 continue
 
-
             elif o.is_commutative:
                 #      e
                 # o = b
@@ -135,7 +134,6 @@ def flatten(cls, seq):
                 else:
                     c_powers[b] = e
 
-
             # NON-COMMUTATIVE
             else:
                 if o is not NC_Marker:
@@ -596,7 +594,6 @@ def _eval_is_odd(self):
         elif is_integer == False:
             return False
 
-
     def _eval_is_even(self):
         is_integer = self.is_integer
 
@@ -607,28 +604,188 @@ def _eval_is_even(self):
             return False
 
     def _eval_subs(self, old, new):
+        def permutations(l):
+            """ Method for generating all unqiue permutations of a list with
+            commutative elements"""
+            sz = len(l)
+            if sz <= 1:
+                return [l]
+            return [p[:i]+[l[0]]+p[i:] for i in xrange(sz) for p in permutations(l[1:])]
+
+        # Some stuff that was already here
         if self == old:
             return new
-        if isinstance(old, FunctionClass):
+        if isinstance(type(old), FunctionClass):
             return self.__class__(*[s._eval_subs(old, new) for s in self.args ])
+
+        # Create lists of terms, tuples of coefficents
         coeff_self,terms_self = self.as_coeff_terms()
         coeff_old,terms_old = old.as_coeff_terms()
-        if terms_self == terms_old: # (2*a).subs(3*a,y) -> 2/3*y
-            return new * coeff_self/coeff_old
-        l1, l2 = len(terms_self), len(terms_old)
-        if l2 == 0:
+        self_set = [element for element in terms_self]
+        old_set = [element for element in terms_old]
+
+        """ These two blocks convert any powers of elements to multiple
+        instances of those elements"""
+        l_temp = [] #temporary
+        for i in terms_old:
+            if i.is_Pow and type(i.exp) is Integer:
+                if i.exp > 0:
+                    for j in range(abs(i.exp)): l_temp.append(i.base)   #convert (...h**2...) to (...h,h...)
+                elif i.exp < 0:
+                    for j in range(abs(i.exp)): l_temp.append(1/i.base)   #convert (...h**2...) to (...h,h...)
+            else: l_temp.append(i)
+        old_set = l_temp
+        l_temp = [] #temporary
+        for i in terms_self:
+            if i.is_Pow and type(i.exp) is Integer:
+                if i.exp > 0:
+                    for j in range(abs(i.exp)): l_temp.append(i.base)   #convert (...h**2...) to (...h,h...)
+                elif i.exp < 0:
+                    for j in range(abs(i.exp)): l_temp.append(1/i.base)   #convert (...h**2...) to (...h,h...)
+            else: l_temp.append(i)
+        self_set = l_temp
+
+        # Get the lengths defined for easy access
+        len_self, len_old = len(self_set), len(old_set)
+
+        """ Some base cases. Standard """
+        if len_old == 0:
             # if old is just a number, go through the self.args one by one
             return Mul(*[x._eval_subs(old, new) for x in self.args])
-        elif l2 < l1:
-            # old is some something more complex, like:
-            # (a*b*c*d).subs(b*c,x) -> a*x*d
-            # then we need to search where in self.args the "old" is, and then
-            # correctly substitute both terms and coefficients.
-            self_set = set(terms_self)
-            old_set = set(terms_old)
-            if old_set < self_set:
-                ret_set = self_set - old_set
-                return Mul(new, coeff_self/coeff_old, *[s._eval_subs(old, new) for s in ret_set])
+        elif len_old == 1:
+            for element in self_set:
+                if element == old_set[0]:
+                    self_set.insert(self_set.index(element),new)
+                    self_set.remove(element)
+                # Needed to add this because powers were messing up. I'm sure there is an easier way. NEEDS REVIEW
+                # This also takes care of expressions like (a*b)/c where 1/c is treated like c^-1
+                elif old_set[0] in element:
+                    self_set.insert(self_set.index(element),element._eval_subs(old,new))
+                    del self_set[self_set.index(element)]
+            return Mul(coeff_self/coeff_old,*[element for element in self_set])
+        # This also seems unnecessarily long but it gets the job done.
+        # 1. Checks to see if its all comm because then just use permutations
+        # 2. If it has one noncomm, then get rid of all comm, then check term by term for noncomm
+        elif len_self == len_old:
+            for el in old_set:
+                if not el.is_commutative: commQ = False
+                else: commQ = True
+            if commQ and old_set in permutations(self_set): return Mul(coeff_self/coeff_old,new)
+            elif not commQ:
+                self_temp = self_set[:]
+                old_temp = old_set[:]
+                for ele in self_set:
+                    if ele.is_commutative and ele in old_set: self_temp.remove(ele); old_temp.remove(ele)
+                allThereQ = True
+                for i in range(len(self_temp)):
+                    if allThereQ and self_temp[i] == old_temp[i]: pass
+                    else: 
+                        allThereQ = False
+                        break
+                if allThereQ: return Mul(coeff_self/coeff_old,new)
+
+        # The real part :)
+        elif len_old < len_self:
+            temp = []
+            removed = []
+
+            # Break up commutative out front, non commutative out back
+            self_comm = []; self_noncomm= []
+            old_comm = []; old_noncomm= []
+            for ele in self_set:
+                if ele.is_commutative: self_comm.append(ele)
+                else: self_noncomm.append(ele)
+            for ele in old_set:
+                if ele.is_commutative: old_comm.append(ele)
+                else: old_noncomm.append(ele)
+
+            temp_comm = self_comm[:]
+
+            # What is used by completely commutative expressions
+            if old_noncomm == []:
+                """
+                First see if all the elements of old are present in self. Since
+                they are comm, order doesn't matter. Append new then append the
+                leftovers to temp. Then run subs on it again.
+                """
+                temp_comm = old_comm[:]
+                for ele in old_comm:
+                    if ele in self_comm: temp_comm.remove(ele)
+                if temp_comm == []:
+                    temp.append(new)
+                    for ele in self_comm: temp.append(ele)
+                    for ele in old_comm: temp.remove(ele)
+                    return Mul(coeff_self/coeff_old, *[element for element in temp])._eval_subs(old,new)
+            # Scan through noncommutative self
+            # Takes care of any expression with at least 1 noncomm term
+            elif old_noncomm != []:
+                for i in range(len(self_noncomm)):
+                    """
+                    If a noncomm member of self matches the first noncomm member
+                    in old, then scan through the next noncomm terms looking for
+                    matches.
+                    1. If you can manage to go through all of the noncomm
+                    terms in old in a row, then start scanning for comm terms.
+                    2. If you cannot find all the old noncomm terms in a row, then
+                    append all those elements you scanned through to temp.
+                    3. If we reached the end of the self list and haven't found all
+                    the old terms, do the same as 2.
+                    """
+                    if self_noncomm[i] == old_noncomm[0]:
+                        for j in range(len(old_noncomm)):
+                            # 1
+                            if j == len(old_noncomm) - 1 and i+j < len(self_noncomm) and self_noncomm[i+j] == old_noncomm[j]:
+                                """
+                                a. Start scanning for comm terms.
+                                b. If there aren't any, then append new and
+                                just add all self_comm terms on the front and break
+                                c. If you have them all then add new term, append
+                                all noncomm terms left, insert all comm terms on
+                                front, then get rid of all the ones that were in old.
+                                d. If you dont have them all, just append
+                                all the noncomm terms to temp.
+                                """
+                                # a
+                                for ele in old_comm:
+                                    if ele in self_comm:
+                                        temp_comm.remove(ele)
+                                # b
+                                if old_comm == []:
+                                    temp.append(new)
+                                    for k in range(i+j+1,len(self_noncomm)):
+                                        temp.append(self_noncomm[k])
+                                    for ele in self_comm:
+                                        temp.append(ele)
+                                    return Mul(coeff_self/coeff_old, *[element for element in temp])._eval_subs(old,new)
+                                # c NEEDS REVIEW
+                                if temp_comm == []:
+                                    temp.append(new)
+                                    for k in range(i+j+1,len(self_noncomm)):
+                                        temp.append(self_noncomm[k])
+                                    for k in range(len(self_comm)):
+                                        temp.insert(0,self_comm[k])
+                                    for ele in old_comm: # ESPECIALLY THIS
+                                        if ele in self_comm:
+                                            temp.remove(ele)
+                                    return Mul(coeff_self/coeff_old, *[element for element in temp])._eval_subs(old,new)
+                                # d
+                                else:
+                                    for k in range(i,i+j):
+                                        temp.append(self_noncomm[k])
+                                    break
+                            # 2
+                            elif i+j < len(self_noncomm) and self_noncomm[i+j] != old_noncomm[j]:
+                                for k in range(i,i+j):
+                                    temp.append(self_noncomm[k])
+                                break
+                            # 3
+                            elif j == len(old_noncomm) - 1 and i+j >= len(self_noncomm):
+                                for k in range(i,len(self_noncomm)):
+                                    temp.append(self_noncomm[k])
+                                break
+                    # Or append the term if it doesn't match
+                    else: temp.append(self_noncomm[i])
+        # Original return statement
         return self.__class__(*[s._eval_subs(old, new) for s in self.args])
 
     def _eval_nseries(self, x, x0, n):
@@ -648,7 +805,6 @@ def _sage_(self):
             s *= x._sage_()
         return s
 
-
 # /cyclic/
 import basic as _
 _.Mul       = Mul
